// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Classes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Classes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Classes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Classes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Classes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Classes_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Classes_2eproto_metadata_getter(int index);
namespace Protobuf {
class FullName;
struct FullNameDefaultTypeInternal;
extern FullNameDefaultTypeInternal _FullName_default_instance_;
class Student;
struct StudentDefaultTypeInternal;
extern StudentDefaultTypeInternal _Student_default_instance_;
class StudentGroup;
struct StudentGroupDefaultTypeInternal;
extern StudentGroupDefaultTypeInternal _StudentGroup_default_instance_;
}  // namespace Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::Protobuf::FullName* Arena::CreateMaybeMessage<::Protobuf::FullName>(Arena*);
template<> ::Protobuf::Student* Arena::CreateMaybeMessage<::Protobuf::Student>(Arena*);
template<> ::Protobuf::StudentGroup* Arena::CreateMaybeMessage<::Protobuf::StudentGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protobuf {

// ===================================================================

class FullName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protobuf.FullName) */ {
 public:
  inline FullName() : FullName(nullptr) {}
  virtual ~FullName();
  explicit constexpr FullName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullName(const FullName& from);
  FullName(FullName&& from) noexcept
    : FullName() {
    *this = ::std::move(from);
  }

  inline FullName& operator=(const FullName& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullName& operator=(FullName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FullName& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullName* internal_default_instance() {
    return reinterpret_cast<const FullName*>(
               &_FullName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FullName& a, FullName& b) {
    a.Swap(&b);
  }
  inline void Swap(FullName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FullName* New() const final {
    return CreateMaybeMessage<FullName>(nullptr);
  }

  FullName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FullName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FullName& from);
  void MergeFrom(const FullName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protobuf.FullName";
  }
  protected:
  explicit FullName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Classes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kSurNameFieldNumber = 3,
  };
  // string first_name = 1;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 2;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string sur_name = 3;
  bool has_sur_name() const;
  private:
  bool _internal_has_sur_name() const;
  public:
  void clear_sur_name();
  const std::string& sur_name() const;
  void set_sur_name(const std::string& value);
  void set_sur_name(std::string&& value);
  void set_sur_name(const char* value);
  void set_sur_name(const char* value, size_t size);
  std::string* mutable_sur_name();
  std::string* release_sur_name();
  void set_allocated_sur_name(std::string* sur_name);
  private:
  const std::string& _internal_sur_name() const;
  void _internal_set_sur_name(const std::string& value);
  std::string* _internal_mutable_sur_name();
  public:

  // @@protoc_insertion_point(class_scope:Protobuf.FullName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sur_name_;
  friend struct ::TableStruct_Classes_2eproto;
};
// -------------------------------------------------------------------

class Student PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protobuf.Student) */ {
 public:
  inline Student() : Student(nullptr) {}
  virtual ~Student();
  explicit constexpr Student(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Student(const Student& from);
  Student(Student&& from) noexcept
    : Student() {
    *this = ::std::move(from);
  }

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }
  inline Student& operator=(Student&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Student& default_instance() {
    return *internal_default_instance();
  }
  static inline const Student* internal_default_instance() {
    return reinterpret_cast<const Student*>(
               &_Student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Student& a, Student& b) {
    a.Swap(&b);
  }
  inline void Swap(Student* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Student* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Student* New() const final {
    return CreateMaybeMessage<Student>(nullptr);
  }

  Student* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Student>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Student& from);
  void MergeFrom(const Student& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Student* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protobuf.Student";
  }
  protected:
  explicit Student(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Classes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGradesFieldNumber = 2,
    kFullNameFieldNumber = 1,
    kAvgScoreFieldNumber = 3,
  };
  // repeated uint32 grades = 2;
  int grades_size() const;
  private:
  int _internal_grades_size() const;
  public:
  void clear_grades();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grades(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_grades() const;
  void _internal_add_grades(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_grades();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 grades(int index) const;
  void set_grades(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_grades(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      grades() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_grades();

  // .Protobuf.FullName full_name = 1;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const ::Protobuf::FullName& full_name() const;
  ::Protobuf::FullName* release_full_name();
  ::Protobuf::FullName* mutable_full_name();
  void set_allocated_full_name(::Protobuf::FullName* full_name);
  private:
  const ::Protobuf::FullName& _internal_full_name() const;
  ::Protobuf::FullName* _internal_mutable_full_name();
  public:
  void unsafe_arena_set_allocated_full_name(
      ::Protobuf::FullName* full_name);
  ::Protobuf::FullName* unsafe_arena_release_full_name();

  // float avg_score = 3;
  void clear_avg_score();
  float avg_score() const;
  void set_avg_score(float value);
  private:
  float _internal_avg_score() const;
  void _internal_set_avg_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protobuf.Student)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > grades_;
  mutable std::atomic<int> _grades_cached_byte_size_;
  ::Protobuf::FullName* full_name_;
  float avg_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Classes_2eproto;
};
// -------------------------------------------------------------------

class StudentGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protobuf.StudentGroup) */ {
 public:
  inline StudentGroup() : StudentGroup(nullptr) {}
  virtual ~StudentGroup();
  explicit constexpr StudentGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StudentGroup(const StudentGroup& from);
  StudentGroup(StudentGroup&& from) noexcept
    : StudentGroup() {
    *this = ::std::move(from);
  }

  inline StudentGroup& operator=(const StudentGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudentGroup& operator=(StudentGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StudentGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const StudentGroup* internal_default_instance() {
    return reinterpret_cast<const StudentGroup*>(
               &_StudentGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StudentGroup& a, StudentGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(StudentGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StudentGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StudentGroup* New() const final {
    return CreateMaybeMessage<StudentGroup>(nullptr);
  }

  StudentGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StudentGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StudentGroup& from);
  void MergeFrom(const StudentGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudentGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protobuf.StudentGroup";
  }
  protected:
  explicit StudentGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Classes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudentsFieldNumber = 1,
  };
  // repeated .Protobuf.Student students = 1;
  int students_size() const;
  private:
  int _internal_students_size() const;
  public:
  void clear_students();
  ::Protobuf::Student* mutable_students(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::Student >*
      mutable_students();
  private:
  const ::Protobuf::Student& _internal_students(int index) const;
  ::Protobuf::Student* _internal_add_students();
  public:
  const ::Protobuf::Student& students(int index) const;
  ::Protobuf::Student* add_students();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::Student >&
      students() const;

  // @@protoc_insertion_point(class_scope:Protobuf.StudentGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::Student > students_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Classes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FullName

// string first_name = 1;
inline void FullName::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& FullName::first_name() const {
  // @@protoc_insertion_point(field_get:Protobuf.FullName.first_name)
  return _internal_first_name();
}
inline void FullName::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:Protobuf.FullName.first_name)
}
inline std::string* FullName::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:Protobuf.FullName.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& FullName::_internal_first_name() const {
  return first_name_.Get();
}
inline void FullName::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FullName::set_first_name(std::string&& value) {
  
  first_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Protobuf.FullName.first_name)
}
inline void FullName::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Protobuf.FullName.first_name)
}
inline void FullName::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Protobuf.FullName.first_name)
}
inline std::string* FullName::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FullName::release_first_name() {
  // @@protoc_insertion_point(field_release:Protobuf.FullName.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FullName::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Protobuf.FullName.first_name)
}

// string last_name = 2;
inline void FullName::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& FullName::last_name() const {
  // @@protoc_insertion_point(field_get:Protobuf.FullName.last_name)
  return _internal_last_name();
}
inline void FullName::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:Protobuf.FullName.last_name)
}
inline std::string* FullName::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:Protobuf.FullName.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& FullName::_internal_last_name() const {
  return last_name_.Get();
}
inline void FullName::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FullName::set_last_name(std::string&& value) {
  
  last_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Protobuf.FullName.last_name)
}
inline void FullName::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Protobuf.FullName.last_name)
}
inline void FullName::set_last_name(const char* value,
    size_t size) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Protobuf.FullName.last_name)
}
inline std::string* FullName::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FullName::release_last_name() {
  // @@protoc_insertion_point(field_release:Protobuf.FullName.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FullName::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Protobuf.FullName.last_name)
}

// string sur_name = 3;
inline bool FullName::_internal_has_sur_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FullName::has_sur_name() const {
  return _internal_has_sur_name();
}
inline void FullName::clear_sur_name() {
  sur_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FullName::sur_name() const {
  // @@protoc_insertion_point(field_get:Protobuf.FullName.sur_name)
  return _internal_sur_name();
}
inline void FullName::set_sur_name(const std::string& value) {
  _internal_set_sur_name(value);
  // @@protoc_insertion_point(field_set:Protobuf.FullName.sur_name)
}
inline std::string* FullName::mutable_sur_name() {
  // @@protoc_insertion_point(field_mutable:Protobuf.FullName.sur_name)
  return _internal_mutable_sur_name();
}
inline const std::string& FullName::_internal_sur_name() const {
  return sur_name_.Get();
}
inline void FullName::_internal_set_sur_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sur_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FullName::set_sur_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sur_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Protobuf.FullName.sur_name)
}
inline void FullName::set_sur_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sur_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Protobuf.FullName.sur_name)
}
inline void FullName::set_sur_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sur_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Protobuf.FullName.sur_name)
}
inline std::string* FullName::_internal_mutable_sur_name() {
  _has_bits_[0] |= 0x00000001u;
  return sur_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FullName::release_sur_name() {
  // @@protoc_insertion_point(field_release:Protobuf.FullName.sur_name)
  if (!_internal_has_sur_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sur_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FullName::set_allocated_sur_name(std::string* sur_name) {
  if (sur_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sur_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sur_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Protobuf.FullName.sur_name)
}

// -------------------------------------------------------------------

// Student

// .Protobuf.FullName full_name = 1;
inline bool Student::_internal_has_full_name() const {
  return this != internal_default_instance() && full_name_ != nullptr;
}
inline bool Student::has_full_name() const {
  return _internal_has_full_name();
}
inline void Student::clear_full_name() {
  if (GetArena() == nullptr && full_name_ != nullptr) {
    delete full_name_;
  }
  full_name_ = nullptr;
}
inline const ::Protobuf::FullName& Student::_internal_full_name() const {
  const ::Protobuf::FullName* p = full_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protobuf::FullName&>(
      ::Protobuf::_FullName_default_instance_);
}
inline const ::Protobuf::FullName& Student::full_name() const {
  // @@protoc_insertion_point(field_get:Protobuf.Student.full_name)
  return _internal_full_name();
}
inline void Student::unsafe_arena_set_allocated_full_name(
    ::Protobuf::FullName* full_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_name_);
  }
  full_name_ = full_name;
  if (full_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protobuf.Student.full_name)
}
inline ::Protobuf::FullName* Student::release_full_name() {
  
  ::Protobuf::FullName* temp = full_name_;
  full_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protobuf::FullName* Student::unsafe_arena_release_full_name() {
  // @@protoc_insertion_point(field_release:Protobuf.Student.full_name)
  
  ::Protobuf::FullName* temp = full_name_;
  full_name_ = nullptr;
  return temp;
}
inline ::Protobuf::FullName* Student::_internal_mutable_full_name() {
  
  if (full_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protobuf::FullName>(GetArena());
    full_name_ = p;
  }
  return full_name_;
}
inline ::Protobuf::FullName* Student::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:Protobuf.Student.full_name)
  return _internal_mutable_full_name();
}
inline void Student::set_allocated_full_name(::Protobuf::FullName* full_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete full_name_;
  }
  if (full_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(full_name);
    if (message_arena != submessage_arena) {
      full_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_name, submessage_arena);
    }
    
  } else {
    
  }
  full_name_ = full_name;
  // @@protoc_insertion_point(field_set_allocated:Protobuf.Student.full_name)
}

// repeated uint32 grades = 2;
inline int Student::_internal_grades_size() const {
  return grades_.size();
}
inline int Student::grades_size() const {
  return _internal_grades_size();
}
inline void Student::clear_grades() {
  grades_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Student::_internal_grades(int index) const {
  return grades_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Student::grades(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.Student.grades)
  return _internal_grades(index);
}
inline void Student::set_grades(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  grades_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protobuf.Student.grades)
}
inline void Student::_internal_add_grades(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  grades_.Add(value);
}
inline void Student::add_grades(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_grades(value);
  // @@protoc_insertion_point(field_add:Protobuf.Student.grades)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Student::_internal_grades() const {
  return grades_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Student::grades() const {
  // @@protoc_insertion_point(field_list:Protobuf.Student.grades)
  return _internal_grades();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Student::_internal_mutable_grades() {
  return &grades_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Student::mutable_grades() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.Student.grades)
  return _internal_mutable_grades();
}

// float avg_score = 3;
inline void Student::clear_avg_score() {
  avg_score_ = 0;
}
inline float Student::_internal_avg_score() const {
  return avg_score_;
}
inline float Student::avg_score() const {
  // @@protoc_insertion_point(field_get:Protobuf.Student.avg_score)
  return _internal_avg_score();
}
inline void Student::_internal_set_avg_score(float value) {
  
  avg_score_ = value;
}
inline void Student::set_avg_score(float value) {
  _internal_set_avg_score(value);
  // @@protoc_insertion_point(field_set:Protobuf.Student.avg_score)
}

// -------------------------------------------------------------------

// StudentGroup

// repeated .Protobuf.Student students = 1;
inline int StudentGroup::_internal_students_size() const {
  return students_.size();
}
inline int StudentGroup::students_size() const {
  return _internal_students_size();
}
inline void StudentGroup::clear_students() {
  students_.Clear();
}
inline ::Protobuf::Student* StudentGroup::mutable_students(int index) {
  // @@protoc_insertion_point(field_mutable:Protobuf.StudentGroup.students)
  return students_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::Student >*
StudentGroup::mutable_students() {
  // @@protoc_insertion_point(field_mutable_list:Protobuf.StudentGroup.students)
  return &students_;
}
inline const ::Protobuf::Student& StudentGroup::_internal_students(int index) const {
  return students_.Get(index);
}
inline const ::Protobuf::Student& StudentGroup::students(int index) const {
  // @@protoc_insertion_point(field_get:Protobuf.StudentGroup.students)
  return _internal_students(index);
}
inline ::Protobuf::Student* StudentGroup::_internal_add_students() {
  return students_.Add();
}
inline ::Protobuf::Student* StudentGroup::add_students() {
  // @@protoc_insertion_point(field_add:Protobuf.StudentGroup.students)
  return _internal_add_students();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protobuf::Student >&
StudentGroup::students() const {
  // @@protoc_insertion_point(field_list:Protobuf.StudentGroup.students)
  return students_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Classes_2eproto
